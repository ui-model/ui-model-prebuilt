{"version":3,"sources":["webpack:///ui-model/angular-d3/src/lib/ui-model-d3.module.ts","webpack:///ui-model/angular-svg/src/lib/directives/shim/use.directive.ts","webpack:///ui-model/angular-svg/src/lib/ui-model-svg.module.ts","webpack:///src/app/showcase/_layout/brief-viewer/brief-viewer.component.html","webpack:///src/app/showcase/_layout/brief-viewer/brief-viewer.component.ts","webpack:///src/app/shared/components/markdown-viewer/markdown-viewer.component.html","webpack:///src/app/shared/components/markdown-viewer/markdown-viewer.component.ts","webpack:///src/app/showcase/_layout/document-viewer/document-viewer.component.html","webpack:///src/app/showcase/_layout/document-viewer/document-viewer.component.ts","webpack:///src/app/showcase/_layout/source-viewer/source-viewer.component.html","webpack:///src/app/showcase/_layout/source-viewer/source-viewer.component.ts","webpack:///src/app/showcase/_layout/layout/layout.component.ts","webpack:///src/app/showcase/_layout/layout/layout.component.html","webpack:///src/app/showcase/showcase-routing.module.ts","webpack:///src/app/showcase/home/home.component.ts","webpack:///src/app/showcase/home/home.component.html","webpack:///src/app/showcase/showcase.module.ts"],"names":["UiModelD3Module","UiModelSvgModule","BriefViewerComponent","meta","MarkdownViewerComponent","DocumentViewerComponent","SourceViewerComponent","LayoutComponent","routes","path","pathMatch","component","HomeComponent","source","this","content","loadDocument","data","id","title","authors","map","of","children","ShowcaseRoutingModule","forChild","ShowcaseModule"],"mappings":"gOA2BO,Y,MAAMA,G,8BAAAA,I,oDAAAA,IAAe,SAlBjB,CACP,Q,GAiBG,G,sHCnBA,IC4QA,Q,MAAMC,G,8BAAAA,I,oDAAAA,IAAgB,SAxLlB,CACP,Q,GAuLG,G,+HCpRP,gB,wCAA+B,qD,yBAG7B,kBAA8D,QAAe,Q,yBAAf,yB,yBAFhE,cACE,yBAAgB,OAChB,wBACF,Q,oBADS,qC,kFCKF,Y,MAAMC,EACX,YAAmBC,GAAA,KAAAA,Q,6CADRD,GAAoB,Y,uBAApBA,EAAoB,4SDRjC,sBACA,oB,4BADK,kDACF,+D,uKCOI,G,yBCRP,gB,wCAAqB,4CCOd,Y,MAAME,G,6CAAAA,I,uBAAAA,EAAuB,4JDPpC,sB,KAAK,wB,6WCOE,G,wBCPP,gC,oBAA2C,iC,sBAC3C,gBACE,kCACF,QCKO,Y,MAAMC,EACX,YAAmBF,GAAA,KAAAA,Q,6CADRE,GAAuB,Y,uBAAvBA,EAAuB,iMDRpC,sCACA,uB,MADqB,6BAChB,wC,+HCOE,G,kMCNL,cAA6F,QAAe,Q,yBAArE,kCAAsD,sB,yBAF/F,cACE,yBAAmB,OACnB,oBACF,Q,oBADK,wC,uCAGH,eACE,cAA0D,4EAAS,aACjE,QACF,OACF,O,mDAHsB,qCAClB,yBCCC,Y,MAAMC,EACX,YAAmBH,GAAA,KAAAA,Q,6CADRG,GAAqB,Y,uBAArBA,EAAqB,gZDRlC,oB,qBAIA,iBAAoD,0DAClD,qBAKF,OACA,gB,6CAXG,wDAIiD,oCAC9C,qCAMD,oG,2TCHE,G,4BCDA,Y,MAAMC,EAEX,eAGA,a,6CALWA,I,uBAAAA,EAAe,kHCP5B,gBACE,gBACE,2BACA,wBACA,8BACF,OACA,gBACE,4BACF,OACF,OACA,wBACA,0B,gDDJO,G,gBEAP,MAAMC,EAAiB,CACrB,CACEC,KAAM,GACNC,UAAW,OACXC,UCFG,M,MAAMC,EAEX,YAAYC,GACVC,KAAKC,QAAUF,EAAOG,aAAa,S,6CAH1BJ,GAAa,Y,uBAAbA,EAAa,4FCT1B,gC,sBAAqB,qC,4CDSd,GDGHK,KAAM,CACJC,GAAI,OACJC,MAAO,OACPC,QAAS,CAAC,OAAOC,IAAI,IAAOC,MAGhC,CACEb,KAAM,GACNE,UAAW,EACXY,SAAU,MAQP,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAqB,SAHvB,CAAC,IAAaC,SAASjB,IACtB,O,GAEL,GG7BP,+CAsIO,Y,MAAMkB,G,8BAAAA,I,oDAAAA,IAAc,UARd,CAAC,KAAwB,SA/D3B,CACP,IACA,IACA,IACA,IACA,IACA,IACA,EACA,IACA,EACA,EACA,Q,GA4DG","file":"x","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { GeoBoxDirective } from './directives/geo-box.directive';\nimport { GeoGpsDirective } from './directives/geo-gps.directive';\nimport { GeoLineDirective } from './directives/geo-line.directive';\nimport { GeoPathDirective } from './directives/geo-path.directive';\nimport { D3ColorsPipe } from './pipes/d3-colors.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    D3ColorsPipe,\n    GeoBoxDirective,\n    GeoGpsDirective,\n    GeoLineDirective,\n    GeoPathDirective,\n  ],\n  exports: [\n    D3ColorsPipe,\n    GeoBoxDirective,\n    GeoGpsDirective,\n    GeoLineDirective,\n    GeoPathDirective,\n  ],\n})\nexport class UiModelD3Module {\n}\n\nexport * from './pipes/d3-colors.pipe';\n\nexport * from './directives/geo-box.directive';\nexport * from './directives/geo-gps.directive';\nexport * from './directives/geo-line.directive';\nexport * from './directives/geo-path.directive';\n\nexport * from './services/geo-projection.service';\n","import { Directive, ElementRef, Input } from '@angular/core';\nimport { getAttr, setAttr } from '../../utils/utils';\n\ntype ElementType = SVGUseElement;\n\n@Directive({\n  selector: 'use',\n})\nexport class SvgUseDirective {\n  constructor(private elementRef: ElementRef<ElementType>) {\n  }\n\n  get element(): ElementType {\n    return this.elementRef.nativeElement;\n  }\n\n  get alignmentBaseline(): string {\n    return getAttr(this.elementRef, 'alignment-baseline');\n  }\n\n  @Input('alignment-baseline')\n  set alignmentBaseline(value: string) {\n    setAttr(this.elementRef, 'alignment-baseline', value);\n  }\n\n\n  get baselineShift(): string | number {\n    return getAttr(this.elementRef, 'baseline-shift');\n  }\n\n  @Input('baseline-shift')\n  set baselineShift(value: string | number) {\n    setAttr(this.elementRef, 'baseline-shift', value);\n  }\n\n\n  get class(): string {\n    return getAttr(this.elementRef, 'class');\n  }\n\n  @Input('class')\n  set class(value: string) {\n    setAttr(this.elementRef, 'class', value);\n  }\n\n\n  get clip(): string {\n    return getAttr(this.elementRef, 'clip');\n  }\n\n  @Input('clip')\n  set clip(value: string) {\n    setAttr(this.elementRef, 'clip', value);\n  }\n\n\n  get clipPath(): string {\n    return getAttr(this.elementRef, 'clip-path');\n  }\n\n  @Input('clip-path')\n  set clipPath(value: string) {\n    setAttr(this.elementRef, 'clip-path', value);\n  }\n\n\n  get clipRule(): string {\n    return getAttr(this.elementRef, 'clip-rule');\n  }\n\n  @Input('clip-rule')\n  set clipRule(value: string) {\n    setAttr(this.elementRef, 'clip-rule', value);\n  }\n\n\n  get color(): string {\n    return getAttr(this.elementRef, 'color');\n  }\n\n  @Input('color')\n  set color(value: string) {\n    setAttr(this.elementRef, 'color', value);\n  }\n\n\n  get colorInterpolation(): string {\n    return getAttr(this.elementRef, 'color-interpolation');\n  }\n\n  @Input('color-interpolation')\n  set colorInterpolation(value: string) {\n    setAttr(this.elementRef, 'color-interpolation', value);\n  }\n\n\n  get colorInterpolationFilters(): string {\n    return getAttr(this.elementRef, 'color-interpolation-filters');\n  }\n\n  @Input('color-interpolation-filters')\n  set colorInterpolationFilters(value: string) {\n    setAttr(this.elementRef, 'color-interpolation-filters', value);\n  }\n\n\n  get colorProfile(): string {\n    return getAttr(this.elementRef, 'color-profile');\n  }\n\n  @Input('color-profile')\n  set colorProfile(value: string) {\n    setAttr(this.elementRef, 'color-profile', value);\n  }\n\n\n  get colorRendering(): string {\n    return getAttr(this.elementRef, 'color-rendering');\n  }\n\n  @Input('color-rendering')\n  set colorRendering(value: string) {\n    setAttr(this.elementRef, 'color-rendering', value);\n  }\n\n\n  get cursor(): string {\n    return getAttr(this.elementRef, 'cursor');\n  }\n\n  @Input('cursor')\n  set cursor(value: string) {\n    setAttr(this.elementRef, 'cursor', value);\n  }\n\n\n  get direction(): string {\n    return getAttr(this.elementRef, 'direction');\n  }\n\n  @Input('direction')\n  set direction(value: string) {\n    setAttr(this.elementRef, 'direction', value);\n  }\n\n\n  get display(): string {\n    return getAttr(this.elementRef, 'display');\n  }\n\n  @Input('display')\n  set display(value: string) {\n    setAttr(this.elementRef, 'display', value);\n  }\n\n\n  get dominantBaseline(): string {\n    return getAttr(this.elementRef, 'dominant-baseline');\n  }\n\n  @Input('dominant-baseline')\n  set dominantBaseline(value: string) {\n    setAttr(this.elementRef, 'dominant-baseline', value);\n  }\n\n\n  get enableBackground(): string {\n    return getAttr(this.elementRef, 'enable-background');\n  }\n\n  @Input('enable-background')\n  set enableBackground(value: string) {\n    setAttr(this.elementRef, 'enable-background', value);\n  }\n\n\n  get externalResourcesRequired(): boolean {\n    return getAttr(this.elementRef, 'externalResourcesRequired');\n  }\n\n  @Input('externalResourcesRequired')\n  set externalResourcesRequired(value: boolean) {\n    setAttr(this.elementRef, 'externalResourcesRequired', value);\n  }\n\n\n  get fill(): string {\n    return getAttr(this.elementRef, 'fill');\n  }\n\n  @Input('fill')\n  set fill(value: string) {\n    setAttr(this.elementRef, 'fill', value);\n  }\n\n\n  get fillOpacity(): string | number {\n    return getAttr(this.elementRef, 'fill-opacity');\n  }\n\n  @Input('fill-opacity')\n  set fillOpacity(value: string | number) {\n    setAttr(this.elementRef, 'fill-opacity', value);\n  }\n\n\n  get fillRule(): string {\n    return getAttr(this.elementRef, 'fill-rule');\n  }\n\n  @Input('fill-rule')\n  set fillRule(value: string) {\n    setAttr(this.elementRef, 'fill-rule', value);\n  }\n\n\n  get filter(): string {\n    return getAttr(this.elementRef, 'filter');\n  }\n\n  @Input('filter')\n  set filter(value: string) {\n    setAttr(this.elementRef, 'filter', value);\n  }\n\n\n  get floodColor(): string {\n    return getAttr(this.elementRef, 'flood-color');\n  }\n\n  @Input('flood-color')\n  set floodColor(value: string) {\n    setAttr(this.elementRef, 'flood-color', value);\n  }\n\n\n  get floodOpacity(): string | number {\n    return getAttr(this.elementRef, 'flood-opacity');\n  }\n\n  @Input('flood-opacity')\n  set floodOpacity(value: string | number) {\n    setAttr(this.elementRef, 'flood-opacity', value);\n  }\n\n\n  get fontFamily(): string {\n    return getAttr(this.elementRef, 'font-family');\n  }\n\n  @Input('font-family')\n  set fontFamily(value: string) {\n    setAttr(this.elementRef, 'font-family', value);\n  }\n\n\n  get fontSize(): string | number {\n    return getAttr(this.elementRef, 'font-size');\n  }\n\n  @Input('font-size')\n  set fontSize(value: string | number) {\n    setAttr(this.elementRef, 'font-size', value);\n  }\n\n\n  get fontSizeAdjust(): string | number {\n    return getAttr(this.elementRef, 'font-size-adjust');\n  }\n\n  @Input('font-size-adjust')\n  set fontSizeAdjust(value: string | number) {\n    setAttr(this.elementRef, 'font-size-adjust', value);\n  }\n\n\n  get fontStretch(): string {\n    return getAttr(this.elementRef, 'font-stretch');\n  }\n\n  @Input('font-stretch')\n  set fontStretch(value: string) {\n    setAttr(this.elementRef, 'font-stretch', value);\n  }\n\n\n  get fontStyle(): string {\n    return getAttr(this.elementRef, 'font-style');\n  }\n\n  @Input('font-style')\n  set fontStyle(value: string) {\n    setAttr(this.elementRef, 'font-style', value);\n  }\n\n\n  get fontVariant(): string {\n    return getAttr(this.elementRef, 'font-variant');\n  }\n\n  @Input('font-variant')\n  set fontVariant(value: string) {\n    setAttr(this.elementRef, 'font-variant', value);\n  }\n\n\n  get fontWeight(): string {\n    return getAttr(this.elementRef, 'font-weight');\n  }\n\n  @Input('font-weight')\n  set fontWeight(value: string) {\n    setAttr(this.elementRef, 'font-weight', value);\n  }\n\n\n  get glyphOrientationHorizontal(): string | number {\n    return getAttr(this.elementRef, 'glyph-orientation-horizontal');\n  }\n\n  @Input('glyph-orientation-horizontal')\n  set glyphOrientationHorizontal(value: string | number) {\n    setAttr(this.elementRef, 'glyph-orientation-horizontal', value);\n  }\n\n\n  get glyphOrientationVertical(): string | number {\n    return getAttr(this.elementRef, 'glyph-orientation-vertical');\n  }\n\n  @Input('glyph-orientation-vertical')\n  set glyphOrientationVertical(value: string | number) {\n    setAttr(this.elementRef, 'glyph-orientation-vertical', value);\n  }\n\n\n  get height(): string | number {\n    return getAttr(this.elementRef, 'height');\n  }\n\n  @Input('height')\n  set height(value: string | number) {\n    setAttr(this.elementRef, 'height', value);\n  }\n\n\n  get id(): string {\n    return getAttr(this.elementRef, 'id');\n  }\n\n  @Input('id')\n  set id(value: string) {\n    setAttr(this.elementRef, 'id', value);\n  }\n\n\n  get imageRendering(): string {\n    return getAttr(this.elementRef, 'image-rendering');\n  }\n\n  @Input('image-rendering')\n  set imageRendering(value: string) {\n    setAttr(this.elementRef, 'image-rendering', value);\n  }\n\n\n  get letterSpacing(): string | number {\n    return getAttr(this.elementRef, 'letter-spacing');\n  }\n\n  @Input('letter-spacing')\n  set letterSpacing(value: string | number) {\n    setAttr(this.elementRef, 'letter-spacing', value);\n  }\n\n\n  get lightingColor(): string {\n    return getAttr(this.elementRef, 'lighting-color');\n  }\n\n  @Input('lighting-color')\n  set lightingColor(value: string) {\n    setAttr(this.elementRef, 'lighting-color', value);\n  }\n\n\n  get markerEnd(): string {\n    return getAttr(this.elementRef, 'marker-end');\n  }\n\n  @Input('marker-end')\n  set markerEnd(value: string) {\n    setAttr(this.elementRef, 'marker-end', value);\n  }\n\n\n  get markerMid(): string {\n    return getAttr(this.elementRef, 'marker-mid');\n  }\n\n  @Input('marker-mid')\n  set markerMid(value: string) {\n    setAttr(this.elementRef, 'marker-mid', value);\n  }\n\n\n  get markerStart(): string {\n    return getAttr(this.elementRef, 'marker-start');\n  }\n\n  @Input('marker-start')\n  set markerStart(value: string) {\n    setAttr(this.elementRef, 'marker-start', value);\n  }\n\n\n  get mask(): string {\n    return getAttr(this.elementRef, 'mask');\n  }\n\n  @Input('mask')\n  set mask(value: string) {\n    setAttr(this.elementRef, 'mask', value);\n  }\n\n\n  get opacity(): string | number {\n    return getAttr(this.elementRef, 'opacity');\n  }\n\n  @Input('opacity')\n  set opacity(value: string | number) {\n    setAttr(this.elementRef, 'opacity', value);\n  }\n\n\n  get overflow(): string {\n    return getAttr(this.elementRef, 'overflow');\n  }\n\n  @Input('overflow')\n  set overflow(value: string) {\n    setAttr(this.elementRef, 'overflow', value);\n  }\n\n\n  get pointerEvents(): string {\n    return getAttr(this.elementRef, 'pointer-events');\n  }\n\n  @Input('pointer-events')\n  set pointerEvents(value: string) {\n    setAttr(this.elementRef, 'pointer-events', value);\n  }\n\n\n  get requiredExtensions(): string {\n    return getAttr(this.elementRef, 'requiredExtensions');\n  }\n\n  @Input('requiredExtensions')\n  set requiredExtensions(value: string) {\n    setAttr(this.elementRef, 'requiredExtensions', value);\n  }\n\n\n  get requiredFeatures(): string {\n    return getAttr(this.elementRef, 'requiredFeatures');\n  }\n\n  @Input('requiredFeatures')\n  set requiredFeatures(value: string) {\n    setAttr(this.elementRef, 'requiredFeatures', value);\n  }\n\n\n  get shapeRendering(): string {\n    return getAttr(this.elementRef, 'shape-rendering');\n  }\n\n  @Input('shape-rendering')\n  set shapeRendering(value: string) {\n    setAttr(this.elementRef, 'shape-rendering', value);\n  }\n\n\n  get stopColor(): string {\n    return getAttr(this.elementRef, 'stop-color');\n  }\n\n  @Input('stop-color')\n  set stopColor(value: string) {\n    setAttr(this.elementRef, 'stop-color', value);\n  }\n\n\n  get stopOpacity(): string | number {\n    return getAttr(this.elementRef, 'stop-opacity');\n  }\n\n  @Input('stop-opacity')\n  set stopOpacity(value: string | number) {\n    setAttr(this.elementRef, 'stop-opacity', value);\n  }\n\n\n  get stroke(): string {\n    return getAttr(this.elementRef, 'stroke');\n  }\n\n  @Input('stroke')\n  set stroke(value: string) {\n    setAttr(this.elementRef, 'stroke', value);\n  }\n\n\n  get strokeDasharray(): string {\n    return getAttr(this.elementRef, 'stroke-dasharray');\n  }\n\n  @Input('stroke-dasharray')\n  set strokeDasharray(value: string) {\n    setAttr(this.elementRef, 'stroke-dasharray', value);\n  }\n\n\n  get strokeDashoffset(): string | number {\n    return getAttr(this.elementRef, 'stroke-dashoffset');\n  }\n\n  @Input('stroke-dashoffset')\n  set strokeDashoffset(value: string | number) {\n    setAttr(this.elementRef, 'stroke-dashoffset', value);\n  }\n\n\n  get strokeLinecap(): string {\n    return getAttr(this.elementRef, 'stroke-linecap');\n  }\n\n  @Input('stroke-linecap')\n  set strokeLinecap(value: string) {\n    setAttr(this.elementRef, 'stroke-linecap', value);\n  }\n\n\n  get strokeLinejoin(): string {\n    return getAttr(this.elementRef, 'stroke-linejoin');\n  }\n\n  @Input('stroke-linejoin')\n  set strokeLinejoin(value: string) {\n    setAttr(this.elementRef, 'stroke-linejoin', value);\n  }\n\n\n  get strokeMiterlimit(): string | number {\n    return getAttr(this.elementRef, 'stroke-miterlimit');\n  }\n\n  @Input('stroke-miterlimit')\n  set strokeMiterlimit(value: string | number) {\n    setAttr(this.elementRef, 'stroke-miterlimit', value);\n  }\n\n\n  get strokeOpacity(): string | number {\n    return getAttr(this.elementRef, 'stroke-opacity');\n  }\n\n  @Input('stroke-opacity')\n  set strokeOpacity(value: string | number) {\n    setAttr(this.elementRef, 'stroke-opacity', value);\n  }\n\n\n  get strokeWidth(): string | number {\n    return getAttr(this.elementRef, 'stroke-width');\n  }\n\n  @Input('stroke-width')\n  set strokeWidth(value: string | number) {\n    setAttr(this.elementRef, 'stroke-width', value);\n  }\n\n\n  get style(): string {\n    return getAttr(this.elementRef, 'style');\n  }\n\n  @Input('style')\n  set style(value: string) {\n    setAttr(this.elementRef, 'style', value);\n  }\n\n\n  get systemLanguage(): string {\n    return getAttr(this.elementRef, 'systemLanguage');\n  }\n\n  @Input('systemLanguage')\n  set systemLanguage(value: string) {\n    setAttr(this.elementRef, 'systemLanguage', value);\n  }\n\n\n  get textAnchor(): string {\n    return getAttr(this.elementRef, 'text-anchor');\n  }\n\n  @Input('text-anchor')\n  set textAnchor(value: string) {\n    setAttr(this.elementRef, 'text-anchor', value);\n  }\n\n\n  get textDecoration(): string {\n    return getAttr(this.elementRef, 'text-decoration');\n  }\n\n  @Input('text-decoration')\n  set textDecoration(value: string) {\n    setAttr(this.elementRef, 'text-decoration', value);\n  }\n\n\n  get textRendering(): string {\n    return getAttr(this.elementRef, 'text-rendering');\n  }\n\n  @Input('text-rendering')\n  set textRendering(value: string) {\n    setAttr(this.elementRef, 'text-rendering', value);\n  }\n\n\n  get transform(): string {\n    return getAttr(this.elementRef, 'transform');\n  }\n\n  @Input('transform')\n  set transform(value: string) {\n    setAttr(this.elementRef, 'transform', value);\n  }\n\n\n  get unicodeBidi(): string {\n    return getAttr(this.elementRef, 'unicode-bidi');\n  }\n\n  @Input('unicode-bidi')\n  set unicodeBidi(value: string) {\n    setAttr(this.elementRef, 'unicode-bidi', value);\n  }\n\n\n  get visibility(): string {\n    return getAttr(this.elementRef, 'visibility');\n  }\n\n  @Input('visibility')\n  set visibility(value: string) {\n    setAttr(this.elementRef, 'visibility', value);\n  }\n\n\n  get width(): string | number {\n    return getAttr(this.elementRef, 'width');\n  }\n\n  @Input('width')\n  set width(value: string | number) {\n    setAttr(this.elementRef, 'width', value);\n  }\n\n\n  get wordSpacing(): string | number {\n    return getAttr(this.elementRef, 'word-spacing');\n  }\n\n  @Input('word-spacing')\n  set wordSpacing(value: string | number) {\n    setAttr(this.elementRef, 'word-spacing', value);\n  }\n\n\n  get writingMode(): string {\n    return getAttr(this.elementRef, 'writing-mode');\n  }\n\n  @Input('writing-mode')\n  set writingMode(value: string) {\n    setAttr(this.elementRef, 'writing-mode', value);\n  }\n\n\n  get x(): string | number {\n    return getAttr(this.elementRef, 'x');\n  }\n\n  @Input('x')\n  set x(value: string | number) {\n    setAttr(this.elementRef, 'x', value);\n  }\n\n\n  get xlinkActuate(): string {\n    return getAttr(this.elementRef, 'xlink:actuate');\n  }\n\n  @Input('xlink:actuate')\n  set xlinkActuate(value: string) {\n    setAttr(this.elementRef, 'xlink:actuate', value);\n  }\n\n\n  get xlinkArcrole(): string {\n    return getAttr(this.elementRef, 'xlink:arcrole');\n  }\n\n  @Input('xlink:arcrole')\n  set xlinkArcrole(value: string) {\n    setAttr(this.elementRef, 'xlink:arcrole', value);\n  }\n\n\n  get xlinkHref(): string {\n    return getAttr(this.elementRef, 'xlink:href');\n  }\n\n  @Input('xlink:href')\n  set xlinkHref(value: string) {\n    setAttr(this.elementRef, 'xlink:href', value);\n  }\n\n\n  get xlinkRole(): string {\n    return getAttr(this.elementRef, 'xlink:role');\n  }\n\n  @Input('xlink:role')\n  set xlinkRole(value: string) {\n    setAttr(this.elementRef, 'xlink:role', value);\n  }\n\n\n  get xlinkShow(): string {\n    return getAttr(this.elementRef, 'xlink:show');\n  }\n\n  @Input('xlink:show')\n  set xlinkShow(value: string) {\n    setAttr(this.elementRef, 'xlink:show', value);\n  }\n\n\n  get xlinkTitle(): string {\n    return getAttr(this.elementRef, 'xlink:title');\n  }\n\n  @Input('xlink:title')\n  set xlinkTitle(value: string) {\n    setAttr(this.elementRef, 'xlink:title', value);\n  }\n\n\n  get xlinkType(): string {\n    return getAttr(this.elementRef, 'xlink:type');\n  }\n\n  @Input('xlink:type')\n  set xlinkType(value: string) {\n    setAttr(this.elementRef, 'xlink:type', value);\n  }\n\n\n  get xmlBase(): string {\n    return getAttr(this.elementRef, 'xml:base');\n  }\n\n  @Input('xml:base')\n  set xmlBase(value: string) {\n    setAttr(this.elementRef, 'xml:base', value);\n  }\n\n\n  get xmlLang(): string {\n    return getAttr(this.elementRef, 'xml:lang');\n  }\n\n  @Input('xml:lang')\n  set xmlLang(value: string) {\n    setAttr(this.elementRef, 'xml:lang', value);\n  }\n\n\n  get xmlSpace(): string {\n    return getAttr(this.elementRef, 'xml:space');\n  }\n\n  @Input('xml:space')\n  set xmlSpace(value: string) {\n    setAttr(this.elementRef, 'xml:space', value);\n  }\n\n\n  get y(): string | number {\n    return getAttr(this.elementRef, 'y');\n  }\n\n  @Input('y')\n  set y(value: string | number) {\n    setAttr(this.elementRef, 'y', value);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AutoSizeDirective } from './directives/auto-size.directive';\nimport { AutoViewBoxDirective } from './directives/auto-view-box.directive';\nimport { SvgADirective } from './directives/shim/a.directive';\nimport { SvgAltGlyphDefDirective } from './directives/shim/alt-glyph-def.directive';\nimport { SvgAltGlyphItemDirective } from './directives/shim/alt-glyph-item.directive';\nimport { SvgAltGlyphDirective } from './directives/shim/alt-glyph.directive';\nimport { SvgAnimateColorDirective } from './directives/shim/animate-color.directive';\nimport { SvgAnimateMotionDirective } from './directives/shim/animate-motion.directive';\nimport { SvgAnimateTransformDirective } from './directives/shim/animate-transform.directive';\nimport { SvgAnimateDirective } from './directives/shim/animate.directive';\nimport { SvgCircleDirective } from './directives/shim/circle.directive';\nimport { SvgClipPathDirective } from './directives/shim/clip-path.directive';\nimport { SvgColorProfileDirective } from './directives/shim/color-profile.directive';\nimport { SvgCursorDirective } from './directives/shim/cursor.directive';\nimport { SvgDefsDirective } from './directives/shim/defs.directive';\nimport { SvgDescDirective } from './directives/shim/desc.directive';\nimport { SvgEllipseDirective } from './directives/shim/ellipse.directive';\nimport { SvgFeBlendDirective } from './directives/shim/fe-blend.directive';\nimport { SvgFeColorMatrixDirective } from './directives/shim/fe-color-matrix.directive';\nimport { SvgFeComponentTransferDirective } from './directives/shim/fe-component-transfer.directive';\nimport { SvgFeCompositeDirective } from './directives/shim/fe-composite.directive';\nimport { SvgFeConvolveMatrixDirective } from './directives/shim/fe-convolve-matrix.directive';\nimport { SvgFeDiffuseLightingDirective } from './directives/shim/fe-diffuse-lighting.directive';\nimport { SvgFeDisplacementMapDirective } from './directives/shim/fe-displacement-map.directive';\nimport { SvgFeDistantLightDirective } from './directives/shim/fe-distant-light.directive';\nimport { SvgFeFloodDirective } from './directives/shim/fe-flood.directive';\nimport { SvgFeFuncADirective } from './directives/shim/fe-func-a.directive';\nimport { SvgFeFuncBDirective } from './directives/shim/fe-func-b.directive';\nimport { SvgFeFuncGDirective } from './directives/shim/fe-func-g.directive';\nimport { SvgFeFuncRDirective } from './directives/shim/fe-func-r.directive';\nimport { SvgFeGaussianBlurDirective } from './directives/shim/fe-gaussian-blur.directive';\nimport { SvgFeImageDirective } from './directives/shim/fe-image.directive';\nimport { SvgFeMergeNodeDirective } from './directives/shim/fe-merge-node.directive';\nimport { SvgFeMergeDirective } from './directives/shim/fe-merge.directive';\nimport { SvgFeMorphologyDirective } from './directives/shim/fe-morphology.directive';\nimport { SvgFeOffsetDirective } from './directives/shim/fe-offset.directive';\nimport { SvgFePointLightDirective } from './directives/shim/fe-point-light.directive';\nimport { SvgFeSpecularLightingDirective } from './directives/shim/fe-specular-lighting.directive';\nimport { SvgFeSpotLightDirective } from './directives/shim/fe-spot-light.directive';\nimport { SvgFeTileDirective } from './directives/shim/fe-tile.directive';\nimport { SvgFeTurbulenceDirective } from './directives/shim/fe-turbulence.directive';\nimport { SvgFilterDirective } from './directives/shim/filter.directive';\nimport { SvgFontFaceFormatDirective } from './directives/shim/font-face-format.directive';\nimport { SvgFontFaceNameDirective } from './directives/shim/font-face-name.directive';\nimport { SvgFontFaceSrcDirective } from './directives/shim/font-face-src.directive';\nimport { SvgFontFaceUriDirective } from './directives/shim/font-face-uri.directive';\nimport { SvgFontFaceDirective } from './directives/shim/font-face.directive';\nimport { SvgFontDirective } from './directives/shim/font.directive';\nimport { SvgForeignObjectDirective } from './directives/shim/foreign-object.directive';\nimport { SvgGDirective } from './directives/shim/g.directive';\nimport { SvgGlyphRefDirective } from './directives/shim/glyph-ref.directive';\nimport { SvgGlyphDirective } from './directives/shim/glyph.directive';\nimport { SvgHatchPathDirective } from './directives/shim/hatch-path.directive';\nimport { SvgHatchDirective } from './directives/shim/hatch.directive';\nimport { SvgHkernDirective } from './directives/shim/hkern.directive';\nimport { SvgImageDirective } from './directives/shim/image.directive';\nimport { SvgLineDirective } from './directives/shim/line.directive';\nimport { SvgLinearGradientDirective } from './directives/shim/linear-gradient.directive';\nimport { SvgMarkerDirective } from './directives/shim/marker.directive';\nimport { SvgMaskDirective } from './directives/shim/mask.directive';\nimport { SvgMeshGradientDirective } from './directives/shim/mesh-gradient.directive';\nimport { SvgMeshPatchDirective } from './directives/shim/mesh-patch.directive';\nimport { SvgMeshRowDirective } from './directives/shim/mesh-row.directive';\nimport { SvgMetadataDirective } from './directives/shim/metadata.directive';\nimport { SvgMissingGlyphDirective } from './directives/shim/missing-glyph.directive';\nimport { SvgMpathDirective } from './directives/shim/mpath.directive';\nimport { SvgPathDirective } from './directives/shim/path.directive';\nimport { SvgPatternDirective } from './directives/shim/pattern.directive';\nimport { SvgPolygonDirective } from './directives/shim/polygon.directive';\nimport { SvgPolylineDirective } from './directives/shim/polyline.directive';\nimport { SvgRadialGradientDirective } from './directives/shim/radial-gradient.directive';\nimport { SvgRectDirective } from './directives/shim/rect.directive';\nimport { SvgScriptDirective } from './directives/shim/script.directive';\nimport { SvgSetDirective } from './directives/shim/set.directive';\nimport { SvgSolidColorDirective } from './directives/shim/solid-color.directive';\nimport { SvgStopDirective } from './directives/shim/stop.directive';\nimport { SvgStyleDirective } from './directives/shim/style.directive';\nimport { SvgSvgDirective } from './directives/shim/svg.directive';\nimport { SvgSwitchDirective } from './directives/shim/switch.directive';\nimport { SvgSymbolDirective } from './directives/shim/symbol.directive';\nimport { SvgTextPathDirective } from './directives/shim/text-path.directive';\nimport { SvgTextDirective } from './directives/shim/text.directive';\nimport { SvgTitleDirective } from './directives/shim/title.directive';\nimport { SvgTrefDirective } from './directives/shim/tref.directive';\nimport { SvgTspanDirective } from './directives/shim/tspan.directive';\nimport { SvgUseDirective } from './directives/shim/use.directive';\nimport { SvgViewDirective } from './directives/shim/view.directive';\nimport { SvgVkernDirective } from './directives/shim/vkern.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    SvgADirective,\n    SvgAltGlyphDirective,\n    SvgAltGlyphDefDirective,\n    SvgAltGlyphItemDirective,\n    SvgAnimateDirective,\n    SvgAnimateColorDirective,\n    SvgAnimateMotionDirective,\n    SvgAnimateTransformDirective,\n    SvgCircleDirective,\n    SvgClipPathDirective,\n    SvgColorProfileDirective,\n    SvgCursorDirective,\n    SvgDefsDirective,\n    SvgDescDirective,\n    SvgEllipseDirective,\n    SvgFeBlendDirective,\n    SvgFeColorMatrixDirective,\n    SvgFeComponentTransferDirective,\n    SvgFeCompositeDirective,\n    SvgFeConvolveMatrixDirective,\n    SvgFeDiffuseLightingDirective,\n    SvgFeDisplacementMapDirective,\n    SvgFeDistantLightDirective,\n    SvgFeFloodDirective,\n    SvgFeFuncADirective,\n    SvgFeFuncBDirective,\n    SvgFeFuncGDirective,\n    SvgFeFuncRDirective,\n    SvgFeGaussianBlurDirective,\n    SvgFeImageDirective,\n    SvgFeMergeDirective,\n    SvgFeMergeNodeDirective,\n    SvgFeMorphologyDirective,\n    SvgFeOffsetDirective,\n    SvgFePointLightDirective,\n    SvgFeSpecularLightingDirective,\n    SvgFeSpotLightDirective,\n    SvgFeTileDirective,\n    SvgFeTurbulenceDirective,\n    SvgFilterDirective,\n    SvgFontDirective,\n    SvgFontFaceDirective,\n    SvgFontFaceFormatDirective,\n    SvgFontFaceNameDirective,\n    SvgFontFaceSrcDirective,\n    SvgFontFaceUriDirective,\n    SvgForeignObjectDirective,\n    SvgGDirective,\n    SvgGlyphDirective,\n    SvgGlyphRefDirective,\n    SvgHatchDirective,\n    SvgHatchPathDirective,\n    SvgHkernDirective,\n    SvgImageDirective,\n    SvgLineDirective,\n    SvgLinearGradientDirective,\n    SvgMarkerDirective,\n    SvgMaskDirective,\n    SvgMetadataDirective,\n    SvgMissingGlyphDirective,\n    SvgMpathDirective,\n    SvgPathDirective,\n    SvgPatternDirective,\n    SvgPolygonDirective,\n    SvgPolylineDirective,\n    SvgRadialGradientDirective,\n    SvgMeshGradientDirective,\n    SvgMeshRowDirective,\n    SvgMeshPatchDirective,\n    SvgRectDirective,\n    SvgScriptDirective,\n    SvgSetDirective,\n    SvgSolidColorDirective,\n    SvgStopDirective,\n    SvgStyleDirective,\n    SvgSvgDirective,\n    SvgSwitchDirective,\n    SvgSymbolDirective,\n    SvgTextDirective,\n    SvgTextPathDirective,\n    SvgTitleDirective,\n    SvgTrefDirective,\n    SvgTspanDirective,\n    SvgUseDirective,\n    SvgViewDirective,\n    SvgVkernDirective,\n    AutoViewBoxDirective,\n    AutoSizeDirective,\n  ],\n  exports: [\n    SvgADirective,\n    SvgAltGlyphDirective,\n    SvgAltGlyphDefDirective,\n    SvgAltGlyphItemDirective,\n    SvgAnimateDirective,\n    SvgAnimateColorDirective,\n    SvgAnimateMotionDirective,\n    SvgAnimateTransformDirective,\n    SvgCircleDirective,\n    SvgClipPathDirective,\n    SvgColorProfileDirective,\n    SvgCursorDirective,\n    SvgDefsDirective,\n    SvgDescDirective,\n    SvgEllipseDirective,\n    SvgFeBlendDirective,\n    SvgFeColorMatrixDirective,\n    SvgFeComponentTransferDirective,\n    SvgFeCompositeDirective,\n    SvgFeConvolveMatrixDirective,\n    SvgFeDiffuseLightingDirective,\n    SvgFeDisplacementMapDirective,\n    SvgFeDistantLightDirective,\n    SvgFeFloodDirective,\n    SvgFeFuncADirective,\n    SvgFeFuncBDirective,\n    SvgFeFuncGDirective,\n    SvgFeFuncRDirective,\n    SvgFeGaussianBlurDirective,\n    SvgFeImageDirective,\n    SvgFeMergeDirective,\n    SvgFeMergeNodeDirective,\n    SvgFeMorphologyDirective,\n    SvgFeOffsetDirective,\n    SvgFePointLightDirective,\n    SvgFeSpecularLightingDirective,\n    SvgFeSpotLightDirective,\n    SvgFeTileDirective,\n    SvgFeTurbulenceDirective,\n    SvgFilterDirective,\n    SvgFontDirective,\n    SvgFontFaceDirective,\n    SvgFontFaceFormatDirective,\n    SvgFontFaceNameDirective,\n    SvgFontFaceSrcDirective,\n    SvgFontFaceUriDirective,\n    SvgForeignObjectDirective,\n    SvgGDirective,\n    SvgGlyphDirective,\n    SvgGlyphRefDirective,\n    SvgHatchDirective,\n    SvgHatchPathDirective,\n    SvgHkernDirective,\n    SvgImageDirective,\n    SvgLineDirective,\n    SvgLinearGradientDirective,\n    SvgMarkerDirective,\n    SvgMaskDirective,\n    SvgMetadataDirective,\n    SvgMissingGlyphDirective,\n    SvgMpathDirective,\n    SvgPathDirective,\n    SvgPatternDirective,\n    SvgPolygonDirective,\n    SvgPolylineDirective,\n    SvgRadialGradientDirective,\n    SvgMeshGradientDirective,\n    SvgMeshRowDirective,\n    SvgMeshPatchDirective,\n    SvgRectDirective,\n    SvgScriptDirective,\n    SvgSetDirective,\n    SvgSolidColorDirective,\n    SvgStopDirective,\n    SvgStyleDirective,\n    SvgSvgDirective,\n    SvgSwitchDirective,\n    SvgSymbolDirective,\n    SvgTextDirective,\n    SvgTextPathDirective,\n    SvgTitleDirective,\n    SvgTrefDirective,\n    SvgTspanDirective,\n    SvgUseDirective,\n    SvgViewDirective,\n    SvgVkernDirective,\n    AutoViewBoxDirective,\n    AutoSizeDirective,\n  ],\n})\nexport class UiModelSvgModule {\n}\n\nexport { AutoSizeDirective } from './directives/auto-size.directive';\nexport { AutoViewBoxDirective } from './directives/auto-view-box.directive';\nexport { SvgADirective } from './directives/shim/a.directive';\nexport { SvgAltGlyphDefDirective } from './directives/shim/alt-glyph-def.directive';\nexport { SvgAltGlyphItemDirective } from './directives/shim/alt-glyph-item.directive';\nexport { SvgAltGlyphDirective } from './directives/shim/alt-glyph.directive';\nexport { SvgAnimateColorDirective } from './directives/shim/animate-color.directive';\nexport { SvgAnimateMotionDirective } from './directives/shim/animate-motion.directive';\nexport { SvgAnimateTransformDirective } from './directives/shim/animate-transform.directive';\nexport { SvgAnimateDirective } from './directives/shim/animate.directive';\nexport { SvgCircleDirective } from './directives/shim/circle.directive';\nexport { SvgClipPathDirective } from './directives/shim/clip-path.directive';\nexport { SvgColorProfileDirective } from './directives/shim/color-profile.directive';\nexport { SvgCursorDirective } from './directives/shim/cursor.directive';\nexport { SvgDefsDirective } from './directives/shim/defs.directive';\nexport { SvgDescDirective } from './directives/shim/desc.directive';\nexport { SvgEllipseDirective } from './directives/shim/ellipse.directive';\nexport { SvgFeBlendDirective } from './directives/shim/fe-blend.directive';\nexport { SvgFeColorMatrixDirective } from './directives/shim/fe-color-matrix.directive';\nexport { SvgFeComponentTransferDirective } from './directives/shim/fe-component-transfer.directive';\nexport { SvgFeCompositeDirective } from './directives/shim/fe-composite.directive';\nexport { SvgFeConvolveMatrixDirective } from './directives/shim/fe-convolve-matrix.directive';\nexport { SvgFeDiffuseLightingDirective } from './directives/shim/fe-diffuse-lighting.directive';\nexport { SvgFeDisplacementMapDirective } from './directives/shim/fe-displacement-map.directive';\nexport { SvgFeDistantLightDirective } from './directives/shim/fe-distant-light.directive';\nexport { SvgFeFloodDirective } from './directives/shim/fe-flood.directive';\nexport { SvgFeFuncADirective } from './directives/shim/fe-func-a.directive';\nexport { SvgFeFuncBDirective } from './directives/shim/fe-func-b.directive';\nexport { SvgFeFuncGDirective } from './directives/shim/fe-func-g.directive';\nexport { SvgFeFuncRDirective } from './directives/shim/fe-func-r.directive';\nexport { SvgFeGaussianBlurDirective } from './directives/shim/fe-gaussian-blur.directive';\nexport { SvgFeImageDirective } from './directives/shim/fe-image.directive';\nexport { SvgFeMergeNodeDirective } from './directives/shim/fe-merge-node.directive';\nexport { SvgFeMergeDirective } from './directives/shim/fe-merge.directive';\nexport { SvgFeMorphologyDirective } from './directives/shim/fe-morphology.directive';\nexport { SvgFeOffsetDirective } from './directives/shim/fe-offset.directive';\nexport { SvgFePointLightDirective } from './directives/shim/fe-point-light.directive';\nexport { SvgFeSpecularLightingDirective } from './directives/shim/fe-specular-lighting.directive';\nexport { SvgFeSpotLightDirective } from './directives/shim/fe-spot-light.directive';\nexport { SvgFeTileDirective } from './directives/shim/fe-tile.directive';\nexport { SvgFeTurbulenceDirective } from './directives/shim/fe-turbulence.directive';\nexport { SvgFilterDirective } from './directives/shim/filter.directive';\nexport { SvgFontFaceFormatDirective } from './directives/shim/font-face-format.directive';\nexport { SvgFontFaceNameDirective } from './directives/shim/font-face-name.directive';\nexport { SvgFontFaceSrcDirective } from './directives/shim/font-face-src.directive';\nexport { SvgFontFaceUriDirective } from './directives/shim/font-face-uri.directive';\nexport { SvgFontFaceDirective } from './directives/shim/font-face.directive';\nexport { SvgFontDirective } from './directives/shim/font.directive';\nexport { SvgForeignObjectDirective } from './directives/shim/foreign-object.directive';\nexport { SvgGDirective } from './directives/shim/g.directive';\nexport { SvgGlyphRefDirective } from './directives/shim/glyph-ref.directive';\nexport { SvgGlyphDirective } from './directives/shim/glyph.directive';\nexport { SvgHatchPathDirective } from './directives/shim/hatch-path.directive';\nexport { SvgHatchDirective } from './directives/shim/hatch.directive';\nexport { SvgHkernDirective } from './directives/shim/hkern.directive';\nexport { SvgImageDirective } from './directives/shim/image.directive';\nexport { SvgLineDirective } from './directives/shim/line.directive';\nexport { SvgLinearGradientDirective } from './directives/shim/linear-gradient.directive';\nexport { SvgMarkerDirective } from './directives/shim/marker.directive';\nexport { SvgMaskDirective } from './directives/shim/mask.directive';\nexport { SvgMeshGradientDirective } from './directives/shim/mesh-gradient.directive';\nexport { SvgMeshPatchDirective } from './directives/shim/mesh-patch.directive';\nexport { SvgMeshRowDirective } from './directives/shim/mesh-row.directive';\nexport { SvgMetadataDirective } from './directives/shim/metadata.directive';\nexport { SvgMissingGlyphDirective } from './directives/shim/missing-glyph.directive';\nexport { SvgMpathDirective } from './directives/shim/mpath.directive';\nexport { SvgPathDirective } from './directives/shim/path.directive';\nexport { SvgPatternDirective } from './directives/shim/pattern.directive';\nexport { SvgPolygonDirective } from './directives/shim/polygon.directive';\nexport { SvgPolylineDirective } from './directives/shim/polyline.directive';\nexport { SvgRadialGradientDirective } from './directives/shim/radial-gradient.directive';\nexport { SvgRectDirective } from './directives/shim/rect.directive';\nexport { SvgScriptDirective } from './directives/shim/script.directive';\nexport { SvgSetDirective } from './directives/shim/set.directive';\nexport { SvgSolidColorDirective } from './directives/shim/solid-color.directive';\nexport { SvgStopDirective } from './directives/shim/stop.directive';\nexport { SvgStyleDirective } from './directives/shim/style.directive';\nexport { SvgSvgDirective } from './directives/shim/svg.directive';\nexport { SvgSwitchDirective } from './directives/shim/switch.directive';\nexport { SvgSymbolDirective } from './directives/shim/symbol.directive';\nexport { SvgTextPathDirective } from './directives/shim/text-path.directive';\nexport { SvgTextDirective } from './directives/shim/text.directive';\nexport { SvgTitleDirective } from './directives/shim/title.directive';\nexport { SvgTrefDirective } from './directives/shim/tref.directive';\nexport { SvgTspanDirective } from './directives/shim/tspan.directive';\nexport { SvgUseDirective } from './directives/shim/use.directive';\nexport { SvgViewDirective } from './directives/shim/view.directive';\nexport { SvgVkernDirective } from './directives/shim/vkern.directive';\n","<div *ngIf=\"meta?.description\" [innerHTML]=\"meta.description | markdown\" class=\"alert alert-info\"></div>\n<p *ngIf=\"meta?.tags|isNotEmpty\" class=\"badge-list\">\n  <span i18n>Tags:</span>\n  <label *ngFor=\"let tag of meta.tags\" class=\"badge badge-info\">{{tag.keyword}}</label>\n</p>\n","import { Component } from '@angular/core';\nimport { MetadataService } from '../../../core/metadata.service';\n\n@Component({\n  selector: 'app-brief-viewer',\n  templateUrl: './brief-viewer.component.html',\n  styleUrls: ['./brief-viewer.component.scss'],\n})\nexport class BriefViewerComponent {\n  constructor(public meta: MetadataService) {\n  }\n}\n","<div *ngIf=\"content\" [innerHTML]=\"content | markdown\"></div>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-markdown-viewer',\n  templateUrl: './markdown-viewer.component.html',\n  styleUrls: ['./markdown-viewer.component.scss'],\n})\nexport class MarkdownViewerComponent {\n  @Input() content: string;\n}\n","<app-markdown-viewer *ngIf=\"meta.document\" [content]=\"meta.document\"></app-markdown-viewer>\n<div *ngIf=\"!meta.document\" class=\"alert alert-danger\">\n  No documentation yet\n</div>\n","import { Component } from '@angular/core';\nimport { MetadataService } from '../../../core/metadata.service';\n\n@Component({\n  selector: 'app-document-viewer',\n  templateUrl: './document-viewer.component.html',\n  styleUrls: ['./document-viewer.component.scss'],\n})\nexport class DocumentViewerComponent {\n  constructor(public meta: MetadataService) {\n  }\n}\n","<p *ngIf=\"meta?.authors|isNotEmpty\" class=\"badge-list\">\n  <span i18n>Authors:</span>\n  <a *ngFor=\"let author of meta.authors\" [routerLink]=\"['/authors', author.id]\" class=\"author\">{{author.name}}</a>\n</p>\n<ul class=\"nav nav-tabs\" uiSelect #types=\"uiSelect\" [(ngModel)]=\"meta.type\">\n  <li *ngFor=\"let type of meta.types\" class=\"nav-item\">\n    <a class=\"nav-link\" [class.active]=\"types.selected(type)\" (click)=\"types.select(type)\">\n      {{type}}\n    </a>\n  </li>\n</ul>\n<pre [innerHTML]=\"meta.source | highlight | default:'<div class=empty>(Empty)</div>'\">\n</pre>\n","import { Component } from '@angular/core';\nimport { MetadataService } from '../../../core/metadata.service';\n\n@Component({\n  selector: 'app-source-viewer',\n  templateUrl: './source-viewer.component.html',\n  styleUrls: ['./source-viewer.component.scss'],\n})\nexport class SourceViewerComponent {\n  constructor(public meta: MetadataService) {\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-showcase-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss'],\n})\nexport class LayoutComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-6\">\n    <app-brief-viewer></app-brief-viewer>\n    <router-outlet></router-outlet>\n    <app-document-viewer></app-document-viewer>\n  </div>\n  <div class=\"col-md-6\">\n    <app-source-viewer></app-source-viewer>\n  </div>\n</div>\n<ui-modal-list></ui-modal-list>\n<ui-toast-list></ui-toast-list>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Author } from '../utils/author';\nimport { showcaseRoutes } from '../utils/showcase-routes';\nimport { LayoutComponent } from './_layout/layout/layout.component';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: HomeComponent,\n    data: {\n      id: 'home',\n      title: 'Home',\n      authors: ['wzc'].map(Author.of),\n    },\n  },\n  {\n    path: '',\n    component: LayoutComponent,\n    children: showcaseRoutes,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ShowcaseRoutingModule {\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SourceCodeService } from '../../core/source-code.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent {\n\n  constructor(source: SourceCodeService) {\n    this.content = source.loadDocument('home');\n  }\n\n  content: Observable<string>;\n}\n","<app-markdown-viewer [content]=\"content | async\"></app-markdown-viewer>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UiModelModule } from '@ui-model/angular';\nimport { RadioGroupWithinFormComponent, TypeAheadWithinFormComponent, UiModelBootstrapModule } from '@ui-model/angular-bootstrap';\nimport { UiModelD3Module } from '@ui-model/angular-d3';\nimport { UiModelMarkdownModule } from '@ui-model/angular-markdown';\nimport { UiModelSvgModule } from '@ui-model/angular-svg';\nimport { SharedModule } from '../shared/shared.module';\nimport { BriefViewerComponent } from './_layout/brief-viewer/brief-viewer.component';\nimport { DocumentViewerComponent } from './_layout/document-viewer/document-viewer.component';\nimport { LayoutComponent } from './_layout/layout/layout.component';\nimport { SourceViewerComponent } from './_layout/source-viewer/source-viewer.component';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { ChartComponent } from './chart/chart.component';\nimport { D3BasicComponent } from './d3-basic/d3-basic.component';\nimport { D3GaugeComponent } from './d3-gauge/d3-gauge.component';\nimport { D3GeoMapComponent } from './d3-geo-map/d3-geo-map.component';\nimport { D3LineChartComponent } from './d3-line-chart/d3-line-chart.component';\nimport { DropdownComponent } from './dropdown/dropdown.component';\nimport { AgreeLicenseEditorComponent } from './form-auto-ui/editors/agree-license-editor/agree-license-editor.component';\nimport { FormAutoUiComponent } from './form-auto-ui/form-auto-ui.component';\nimport { RemoteUsernameValidator } from './form-auto-ui/validators/remote-username.validator';\nimport { FormModelComponent } from './form-model/form-model.component';\nimport { FormComponent } from './form/form.component';\nimport { HomeComponent } from './home/home.component';\nimport { InfiniteScrollComponent } from './infinite-scroll/infinite-scroll.component';\nimport { InplaceEditorComponent } from './inplace-editor/inplace-editor.component';\nimport { MeasureComponent } from './measure/measure.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { ModalContentComponent } from './modal/modal-content/modal-content.component';\nimport { ModalCustomComponent } from './modal/modal-custom/modal-custom.component';\nimport { ModalComponent } from './modal/modal.component';\nimport { MovableComponent } from './movable/movable.component';\nimport { MultiSelectCheckboxComponent } from './multi-select-checkbox/multi-select-checkbox.component';\nimport { MultiSelectNgModelComponent } from './multi-select-ng-model/multi-select-ng-model.component';\nimport { MultiSelectComponent } from './multi-select/multi-select.component';\nimport { PanelComponent } from './panel/panel.component';\nimport { PreviewComponent } from './preview/preview.component';\nimport { RadioButtonComponent } from './radio-button/radio-button.component';\nimport { RadioGroupComponent } from './radio-group/radio-group.component';\nimport { BasicInfoGroupComponent } from './reactive-form/basic-info-group/basic-info-group.component';\nimport { ReactiveFormComponent } from './reactive-form/reactive-form.component';\nimport { SelectBoxComponent } from './select-box/select-box.component';\nimport { SelectNgModelComponent } from './select-ng-model/select-ng-model.component';\n\nimport { SelectComponent } from './select/select.component';\n\nimport { ShowcaseRoutingModule } from './showcase-routing.module';\nimport { TabSetNgModelComponent } from './tab-set-ng-model/tab-set-ng-model.component';\nimport { TabSetComponent } from './tab-set/tab-set.component';\nimport { TableComponent } from './table/table.component';\nimport { ToastComponent } from './toast/toast.component';\nimport { ToggleDetailsComponent } from './toggle-details/toggle-details.component';\nimport { ToggleImagesComponent } from './toggle-images/toggle-images.component';\nimport { ToggleNgModelComponent } from './toggle-ng-model/toggle-ng-model.component';\nimport { ToggleComponent } from './toggle/toggle.component';\nimport { TooltipComponent } from './tooltip/tooltip.component';\nimport { TreeComponent } from './tree/tree.component';\nimport { TypeAheadComponent } from './type-ahead/type-ahead.component';\nimport { ZoomComponent } from './zoom/zoom.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    UiModelModule,\n    UiModelBootstrapModule,\n    UiModelMarkdownModule,\n    UiModelD3Module,\n    SharedModule,\n    ShowcaseRoutingModule,\n    UiModelSvgModule,\n    UiModelBootstrapModule,\n  ],\n  declarations: [\n    HomeComponent,\n    LayoutComponent,\n    BriefViewerComponent,\n    DocumentViewerComponent,\n    SourceViewerComponent,\n    SelectComponent,\n    MultiSelectComponent,\n    ToggleComponent,\n    TableComponent,\n    FormComponent,\n    TreeComponent,\n    CalendarComponent,\n    PreviewComponent,\n    MovableComponent,\n    ModalComponent,\n    ModalContentComponent,\n    ChartComponent,\n    TypeAheadComponent,\n    ZoomComponent,\n    TooltipComponent,\n    RadioGroupComponent,\n    RadioButtonComponent,\n    TabSetComponent,\n    TabSetNgModelComponent,\n    MenuComponent,\n    MultiSelectCheckboxComponent,\n    MultiSelectNgModelComponent,\n    DropdownComponent,\n    InplaceEditorComponent,\n    PanelComponent,\n    ToggleDetailsComponent,\n    ToggleImagesComponent,\n    ToggleNgModelComponent,\n    SelectNgModelComponent,\n    InfiniteScrollComponent,\n    ReactiveFormComponent,\n    BasicInfoGroupComponent,\n    FormModelComponent,\n    FormAutoUiComponent,\n    AgreeLicenseEditorComponent,\n    SelectBoxComponent,\n    ModalCustomComponent,\n    ToastComponent,\n    D3BasicComponent,\n    D3LineChartComponent,\n    D3GaugeComponent,\n    D3GeoMapComponent,\n    MeasureComponent,\n  ],\n  providers: [RemoteUsernameValidator],\n  entryComponents: [\n    RadioGroupWithinFormComponent,\n    AgreeLicenseEditorComponent,\n    ModalCustomComponent,\n    TypeAheadWithinFormComponent,\n  ],\n})\nexport class ShowcaseModule {\n}\n"]}